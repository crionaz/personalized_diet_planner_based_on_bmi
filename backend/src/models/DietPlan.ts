import mongoose, { Schema, model } from 'mongoose';
import { IDietPlan, IDietPlanMeal, IDietPlanModel, INutritionalTargets, MealCategory } from '../types';

// Nutritional Targets Schema
const NutritionalTargetsSchema = new Schema<INutritionalTargets>({
  dailyCalories: { 
    type: Number, 
    required: true, 
    min: 800, 
    max: 5000 
  },
  dailyProtein: { 
    type: Number, 
    required: true, 
    min: 10, 
    max: 500 
  },
  dailyCarbs: { 
    type: Number, 
    required: true, 
    min: 20, 
    max: 800 
  },
  dailyFat: { 
    type: Number, 
    required: true, 
    min: 10, 
    max: 300 
  },
  dailyFiber: { 
    type: Number, 
    min: 0, 
    max: 100 
  },
  dailySodium: { 
    type: Number, 
    min: 0, 
    max: 10000 
  },
  proteinPercentage: { 
    type: Number, 
    required: true, 
    min: 10, 
    max: 50 
  },
  carbsPercentage: { 
    type: Number, 
    required: true, 
    min: 10, 
    max: 70 
  },
  fatPercentage: { 
    type: Number, 
    required: true, 
    min: 10, 
    max: 50 
  }
}, { _id: false });

// Diet Plan Meal Schema
const DietPlanMealSchema = new Schema<IDietPlanMeal>({
  mealId: {
    type: Schema.Types.ObjectId,
    ref: 'Meal',
    required: [true, 'Meal ID is required']
  } as any,
  dayOfWeek: {
    type: Number,
    required: [true, 'Day of week is required'],
    min: 0,
    max: 6,
    index: true
  },
  mealType: {
    type: String,
    required: [true, 'Meal type is required'],
    enum: Object.values(MealCategory),
    index: true
  },
  servings: {
    type: Number,
    required: [true, 'Servings is required'],
    min: 0.25,
    max: 10,
    default: 1
  },
  plannedDate: {
    type: Date,
    index: true
  },
  isCompleted: {
    type: Boolean,
    default: false,
    index: true
  },
  completedAt: {
    type: Date
  },
  notes: {
    type: String,
    maxlength: [200, 'Notes cannot exceed 200 characters']
  }
});

// Main Diet Plan Schema
const DietPlanSchema = new Schema<IDietPlan>({
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: [true, 'User ID is required'],
    index: true
  } as any,
  name: {
    type: String,
    required: [true, 'Diet plan name is required'],
    trim: true,
    maxlength: [100, 'Name cannot exceed 100 characters'],
    index: true
  },
  description: {
    type: String,
    trim: true,
    maxlength: [500, 'Description cannot exceed 500 characters']
  },
  startDate: {
    type: Date,
    required: [true, 'Start date is required'],
    index: true
  },
  endDate: {
    type: Date,
    required: [true, 'End date is required'],
    index: true,
    validate: {
      validator: function(this: IDietPlan, endDate: Date) {
        return endDate > this.startDate;
      },
      message: 'End date must be after start date'
    }
  },
  isActive: {
    type: Boolean,
    default: false,
    index: true
  },
  nutritionalTargets: {
    type: NutritionalTargetsSchema,
    required: [true, 'Nutritional targets are required']
  },
  meals: {
    type: [DietPlanMealSchema],
    required: [true, 'At least one meal is required'],
    validate: {
      validator: function(meals: IDietPlanMeal[]) {
        return meals && meals.length > 0;
      },
      message: 'At least one meal is required'
    }
  },
  generatedBy: {
    type: String,
    required: [true, 'Generated by is required'],
    enum: ['user', 'ai', 'nutritionist'],
    index: true
  },
  tags: [{
    type: String,
    trim: true,
    maxlength: [30, 'Tag cannot exceed 30 characters']
  }]
}, {
  timestamps: true,
  toJSON: { 
    virtuals: true,
    transform: function(doc, ret: any) {
      ret.id = ret._id;
      // Transform meal IDs to strings
      if (ret.meals) {
        ret.meals = ret.meals.map((meal: any) => {
          if (meal._id) {
            meal.id = meal._id;
            delete meal._id;
          }
          return meal;
        });
      }
      return ret;
    }
  },
  toObject: { virtuals: true }
});

// Indexes for efficient queries
DietPlanSchema.index({ userId: 1, isActive: 1 });
DietPlanSchema.index({ startDate: 1, endDate: 1 });
DietPlanSchema.index({ generatedBy: 1, createdAt: -1 });
DietPlanSchema.index({ 'meals.dayOfWeek': 1, 'meals.mealType': 1 });
DietPlanSchema.index({ 'meals.plannedDate': 1 });
DietPlanSchema.index({ 'meals.isCompleted': 1 });

// Virtual for plan duration in days
DietPlanSchema.virtual('durationDays').get(function() {
  const diffTime = Math.abs(this.endDate.getTime() - this.startDate.getTime());
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
});

// Virtual for total meals
DietPlanSchema.virtual('totalMeals').get(function() {
  return this.meals.length;
});

// Virtual for completed meals count
DietPlanSchema.virtual('completedMealsCount').get(function() {
  return this.meals.filter(meal => meal.isCompleted).length;
});

// Virtual for completion percentage
DietPlanSchema.virtual('completionPercentage').get(function() {
  if (this.meals.length === 0) return 0;
  const completedCount = this.meals.filter(meal => meal.isCompleted).length;
  return Math.round((completedCount / this.meals.length) * 100);
});

// Pre-save middleware to validate nutritional targets percentages
DietPlanSchema.pre('save', function(next) {
  const targets = this.nutritionalTargets;
  const totalPercentage = targets.proteinPercentage + targets.carbsPercentage + targets.fatPercentage;
  
  if (Math.abs(totalPercentage - 100) > 1) { // Allow 1% tolerance
    return next(new Error('Nutritional target percentages must sum to 100%'));
  }

  // Ensure only one active plan per user
  if (this.isActive && this.isNew) {
    return DietPlan.updateMany(
      { userId: this.userId, _id: { $ne: this._id } },
      { isActive: false }
    ).then(() => next()).catch(next);
  }

  next();
});

// Pre-save middleware to set completion date
DietPlanSchema.pre('save', function(next) {
  this.meals.forEach(meal => {
    if (meal.isCompleted && !meal.completedAt) {
      meal.completedAt = new Date();
    } else if (!meal.isCompleted) {
      meal.completedAt = undefined;
    }
  });
  next();
});

// Static methods
DietPlanSchema.statics.findByUser = function(userId: string) {
  return this.find({ userId }).sort({ createdAt: -1 });
};

DietPlanSchema.statics.findActiveByUser = function(userId: string) {
  return this.findOne({ userId, isActive: true }).populate('meals.mealId');
};

DietPlanSchema.statics.findByDateRange = function(startDate: Date, endDate: Date) {
  return this.find({
    $or: [
      { startDate: { $gte: startDate, $lte: endDate } },
      { endDate: { $gte: startDate, $lte: endDate } },
      { startDate: { $lte: startDate }, endDate: { $gte: endDate } }
    ]
  });
};

DietPlanSchema.statics.findExpiredPlans = function() {
  return this.find({
    isActive: true,
    endDate: { $lt: new Date() }
  });
};

// Instance methods
DietPlanSchema.methods.calculateDailyNutrition = function(dayOfWeek: number) {
  const dayMeals = this.meals.filter((meal: IDietPlanMeal) => meal.dayOfWeek === dayOfWeek);
  
  return dayMeals.reduce((total: { calories: number; protein: number; carbs: number; fat: number; fiber: number; sodium: number; }, planMeal: { meal: { nutrition: any; }; servings: any; }) => {
    if (planMeal.meal) {
      const nutrition = planMeal.meal.nutrition;
      const servings = planMeal.servings;
      
      return {
        calories: total.calories + (nutrition.calories * servings),
        protein: total.protein + (nutrition.protein * servings),
        carbs: total.carbs + (nutrition.carbs * servings),
        fat: total.fat + (nutrition.fat * servings),
        fiber: total.fiber + ((nutrition.fiber || 0) * servings),
        sodium: total.sodium + ((nutrition.sodium || 0) * servings)
      };
    }
    return total;
  }, {
    calories: 0,
    protein: 0,
    carbs: 0,
    fat: 0,
    fiber: 0,
    sodium: 0
  });
};

DietPlanSchema.methods.getMealsForDate = function(date: Date) {
  const dayOfWeek = date.getDay();
  return this.meals.filter((meal: IDietPlanMeal) => meal.dayOfWeek === dayOfWeek);
};

DietPlanSchema.methods.getWeeklyNutrition = function() {
  const weeklyNutrition = [];
  
  for (let day = 0; day < 7; day++) {
    const dayNutrition = this.calculateDailyNutrition(day);
    weeklyNutrition.push({
      dayOfWeek: day,
      dayName: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][day],
      ...dayNutrition
    });
  }
  
  return weeklyNutrition;
};

DietPlanSchema.methods.markMealCompleted = function(mealId: string, completed: boolean = true) {
  const meal = this.meals.find((m: IDietPlanMeal) => m._id?.toString() === mealId);
  if (meal) {
    meal.isCompleted = completed;
    if (completed && !meal.completedAt) {
      meal.completedAt = new Date();
    } else if (!completed) {
      meal.completedAt = undefined;
    }
  }
  return this.save();
};

DietPlanSchema.methods.addMeal = function(mealData: Omit<IDietPlanMeal, '_id'>) {
  this.meals.push(mealData);
  return this.save();
};

DietPlanSchema.methods.removeMeal = function(mealId: string) {
  this.meals = this.meals.filter((meal: IDietPlanMeal) => meal._id?.toString() !== mealId);
  return this.save();
};

DietPlanSchema.methods.isExpired = function() {
  return new Date() > this.endDate;
};

DietPlanSchema.methods.getDaysRemaining = function() {
  const today = new Date();
  if (today > this.endDate) return 0;
  
  const diffTime = this.endDate.getTime() - today.getTime();
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
};

export const DietPlan = model<IDietPlan, IDietPlanModel>('DietPlan', DietPlanSchema);
export default DietPlan;
